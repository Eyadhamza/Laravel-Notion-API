<?php

namespace PISpace\Notion\Core\Content;

use Illuminate\Http\Resources\MissingValue;
use PISpace\Notion\Enums\NotionBlockContentTypeEnum;
use PISpace\Notion\Enums\NotionBlockTypeEnum;
use PISpace\Notion\Enums\NotionPropertyTypeEnum;

class NotionFile extends NotionContent
{
    private string $fileType;
    private string $fileUrl;
    private string $expiryTime;
    private string $relativeType;

    public static function fromResponse(array $response): static
    {
        return (new static())
            ->setName($response['name'])
            ->setFileType($response['type'])
            ->setFileUrl($response['file']['url'])
            ->setExpiryTime($response['file']['expiry_time']);
    }

    public static function make(NotionPropertyTypeEnum|NotionBlockTypeEnum $valueType = NotionBlockTypeEnum::FILE, mixed $value = 'file'): static|NotionEmptyValue
    {
        return parent::make($valueType, $value); // TODO: Change the autogenerated stub
    }

    public function setFileType(string $fileType): NotionFile
    {
        $this->value = $fileType;
        return $this;
    }

    public function setFileUrl(string $fileUrl): NotionFile
    {
        $this->fileUrl = $fileUrl;
        return $this;
    }

    public function setRelativeType(string $relativeType): NotionContent
    {
        $this->relativeType = $relativeType;
        return $this;
    }
    public function setExpiryTime(string $expiryTime): NotionFile
    {
        $this->expiryTime = $expiryTime;
        return $this;
    }

    public function setName(string $name): static
    {
        $this->name = $name;
        return $this;
    }

    public function setContentType(): NotionContent
    {
        $this->contentType = NotionBlockContentTypeEnum::FILE;
        return $this;
    }

    public function toArrayableValue(): array
    {
        return match (get_class($this->blockType)){
            NotionBlockTypeEnum::class => $this->toArrayableValueForBlock(),
            NotionPropertyTypeEnum::class => $this->toArrayableValueForProperty(),
        };
        }

    private function toArrayableValueForBlock(): array
    {
        return [
            'type' => $this->value,
            $this->value => [
                $this->relativeType => [
                    'url' => $this->fileUrl,
                    'expiry_time' => $this->expiryTime ?? new MissingValue(),
                ]
            ]

        ];
    }

    private function toArrayableValueForProperty(): array
    {
        return [
            'name' => $this->value,
            $this->relativeType => [
                'url' => $this->fileUrl,
                'expiry_time' => $this->expiryTime ?? new MissingValue(),
            ]
        ];
    }


}
